name: Build PonyNotes iOS

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repo"
        required: true
        default: "PonyNotes-IO/PonyNotes"
      branch:
        description: "Branch"
        required: true
        default: "main"
      build_name:
        description: "Build Version (it should match the version in pubspec.yaml)"
        required: true
        default: "0.9.4"
      build_number:
        description: "Build Number (it should be unique)"
        required: true
        default: "1"
      internal_build:
        type: choice
        description: "Internal Build Type (1 for internal, 0 for external)"
        required: true
        default: "1"
        options:
          - "0"
          - "1"
          - "2"
  workflow_call:
    inputs:
      repo:
        description: "Repo"
        required: true
        type: string
      branch:
        description: "Branch"
        required: true
        type: string
      build_name:
        description: "Build Version"
        required: true
        type: string
      build_number:
        description: "Build Number"
        required: true
        type: string
      internal_build:
        description: "Internal Build Type"
        required: true
        type: string
      upload_url:
        description: "Upload URL for release assets"
        required: false
        type: string

env:
  FLUTTER_VERSION: "3.27.4"
  RUST_TOOLCHAIN: "1.85.0"

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [macos-14]
        include:
          - target: aarch64-apple-ios
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.branch }}
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install the Apple certificate and provisioning profile
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64_NEW }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD_NEW }}
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64_NEW }}
          IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          # Debug: Check if secrets are properly set (without exposing values)
          echo "üîç Checking GitHub Secrets status:"
          echo "IOS_CERTIFICATE_BASE64 length: ${#IOS_CERTIFICATE_BASE64}"
          echo "P12_PASSWORD length: ${#P12_PASSWORD}"
          echo "IOS_PROVISION_PROFILE_BASE64 length: ${#IOS_PROVISION_PROFILE_BASE64}"
          echo "IOS_KEYCHAIN_PASSWORD length: ${#IOS_KEYCHAIN_PASSWORD}"
          
          # Check if any secrets are empty
          if [ -z "$IOS_CERTIFICATE_BASE64" ]; then
            echo "‚ùå IOS_CERTIFICATE_BASE64 is empty!"
            exit 1
          fi
          
          if [ -z "$P12_PASSWORD" ]; then
            echo "‚ùå P12_PASSWORD is empty!"
            exit 1
          fi
          
          if [ -z "$IOS_PROVISION_PROFILE_BASE64" ]; then
            echo "‚ùå IOS_PROVISION_PROFILE_BASE64 is empty!"
            exit 1
          fi
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$IOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Debug: Check certificate file before import
          echo "üîç Analyzing certificate file before import..."
          echo "Certificate file size: $(ls -la $CERTIFICATE_PATH | awk '{print $5}') bytes"
          
          # Extract certificate info from the p12 file directly (with fallback methods)
          echo "üìã Certificate info from p12 file:"
          
          # Try with legacy flag first
          if openssl pkcs12 -in $CERTIFICATE_PATH -clcerts -nokeys -legacy -passin pass:"$P12_PASSWORD" 2>/dev/null | openssl x509 -serial -subject -dates -noout 2>/dev/null; then
            echo "‚úÖ Certificate info extracted successfully with legacy method"
          elif openssl pkcs12 -in $CERTIFICATE_PATH -clcerts -nokeys -passin pass:"$P12_PASSWORD" 2>/dev/null | openssl x509 -serial -subject -dates -noout 2>/dev/null; then
            echo "‚úÖ Certificate info extracted successfully without legacy flag"
          else
            echo "‚ö†Ô∏è Could not extract certificate info with OpenSSL, but file exists and has correct size"
            echo "This is likely due to OpenSSL version compatibility, but certificate import should still work"
          fi
          
          # import certificate to keychain
          echo "üì• Importing certificate..."
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH || {
            echo "‚ùå Failed to import certificate!"
            echo "This could mean:"
            echo "1. The certificate file is corrupted"
            echo "2. The password is incorrect"
            echo "3. The certificate format is invalid"
            exit 1
          }
          
          security list-keychain -d user -s $KEYCHAIN_PATH
          echo "‚úÖ Certificate imported successfully"

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Rename the provisioning profile to match expected name
          PP_NAME=$(security cms -D -i $PP_PATH | grep -A 1 "<key>Name</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          echo "üîÑ Renaming provisioning profile from '$PP_NAME' to match configuration..."
          
          # Get the UUID of the provisioning profile
          PP_UUID=$(security cms -D -i $PP_PATH | grep -A 1 "<key>UUID</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          echo "üìã Provisioning profile UUID: $PP_UUID"
          
          # Copy with UUID as filename (this is how Xcode expects it)
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$PP_UUID.mobileprovision
          
          echo "‚úÖ Provisioning profile installed with UUID: $PP_UUID"
          
          # Debug: List provisioning profiles
          echo "üîç Available provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Debug: Check certificate info
          echo "üîç Certificate info:"
          security find-identity -v -p codesigning $KEYCHAIN_PATH
          
                    # Get certificate information for verification
          echo "üîç Certificate verification:"
          CERT_IDENTITY=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep -E "(Apple Development|iPhone Developer)" | head -1 | awk '{print $2}')
          if [ ! -z "$CERT_IDENTITY" ]; then
            echo "‚úÖ Certificate found - SHA-1: $CERT_IDENTITY"
            
            # Try to get certificate serial number for verification (non-critical)
            echo "üîç Attempting to verify certificate serial number..."
            if security find-certificate -Z "$CERT_IDENTITY" -p $KEYCHAIN_PATH > /tmp/cert.pem 2>/dev/null; then
              SERIAL_OPENSSL=$(openssl x509 -in /tmp/cert.pem -serial -noout 2>/dev/null | cut -d= -f2 || echo "")
              if [ ! -z "$SERIAL_OPENSSL" ]; then
                echo "üìã Certificate Serial: $SERIAL_OPENSSL"
                if [ "$SERIAL_OPENSSL" = "1B6BD133C9D349B16B4CBE1220F1AEB2" ]; then
                  echo "‚úÖ Confirmed: Using the NEW certificate!"
                else
                  echo "‚ö†Ô∏è Note: Certificate serial differs from expected, but this may be normal"
                fi
              else
                echo "‚ö†Ô∏è Could not extract serial number (non-critical)"
              fi
              rm -f /tmp/cert.pem
            else
              echo "‚ö†Ô∏è Could not extract certificate details (non-critical)"
            fi
            
            echo "‚úÖ Certificate is ready for code signing"
          else
            echo "‚ùå No signing certificate found in keychain!"
            echo "Available certificates:"
            security find-identity -v -p codesigning $KEYCHAIN_PATH || echo "No certificates found"
            echo "‚ö†Ô∏è This may cause signing to fail, but continuing..."
          fi
          
          # Check certificate validity
          echo "üîç Certificate validity check:"
          CERT_IDENTITY=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep -E "(Apple Development|iPhone Developer)" | head -1 | awk '{print $2}')
          if [ ! -z "$CERT_IDENTITY" ]; then
            echo "Found certificate: $CERT_IDENTITY"
            
            # Try to verify certificate using different approach
            security find-certificate -Z "$CERT_IDENTITY" -p $KEYCHAIN_PATH > /tmp/cert.pem 2>/dev/null || {
              echo "‚ö†Ô∏è Could not extract certificate details, but certificate was imported successfully"
            }
            
            if [ -f /tmp/cert.pem ]; then
              echo "üîç Certificate details:"
              openssl x509 -in /tmp/cert.pem -text -noout | grep -E "(Subject:|Not Before|Not After)" || echo "Certificate info extracted successfully"
              rm -f /tmp/cert.pem
            fi
            
            echo "‚úÖ Certificate is available for code signing"
          else
            echo "‚ùå No signing certificate found!"
            echo "Available certificates:"
            security find-identity -v -p codesigning $KEYCHAIN_PATH || echo "No certificates found"
            echo "‚ö†Ô∏è This may cause signing to fail, but continuing with build..."
          fi
          
          # Debug: Check provisioning profile and get its name
          echo "üîç Provisioning profile info:"
          security cms -D -i $PP_PATH > /tmp/profile_content.plist
          
          # Extract provisioning profile name
          PROFILE_NAME=$(cat /tmp/profile_content.plist | grep -A 1 "<key>Name</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          echo "üîç Provisioning profile name: '$PROFILE_NAME'"
          
          # Check if Bundle ID exists in profile
          if cat /tmp/profile_content.plist | grep -q "com.ioi.ponynotes"; then
            echo "‚úÖ Bundle ID 'com.ioi.ponynotes' found in provisioning profile"
          else
            echo "‚ùå Bundle ID 'com.ioi.ponynotes' NOT found in provisioning profile"
            echo "Available App IDs in profile:"
            cat /tmp/profile_content.plist | grep -A 1 "application-identifier" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/'
          fi
          
          # Check Team ID in profile
          TEAM_ID_IN_PROFILE=$(cat /tmp/profile_content.plist | grep -A 1 "TeamIdentifier" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          echo "üîç Team ID in profile: $TEAM_ID_IN_PROFILE"
          
          if [ "$TEAM_ID_IN_PROFILE" = "5MC7J2V78W" ]; then
            echo "‚úÖ Team ID matches"
          else
            echo "‚ùå Team ID mismatch! Expected: 5MC7J2V78W, Found: $TEAM_ID_IN_PROFILE"
          fi
          
          # Set provisioning profile name and UUID for later use
          echo "PROVISIONING_PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          
          # Get UUID from the profile for Xcode configuration
          PP_UUID=$(cat /tmp/profile_content.plist | grep -A 1 "<key>UUID</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          echo "PROVISIONING_PROFILE_UUID=$PP_UUID" >> $GITHUB_ENV
          echo "üîß Will use UUID for Xcode: $PP_UUID"
          
          # Basic verification that certificate and profile are compatible (non-critical)
          echo "üîç Basic compatibility check..."
          CERT_SHA1=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep -E "(Apple Development|iPhone Developer)" | head -1 | awk '{print $2}')
          if [ ! -z "$CERT_SHA1" ]; then
            echo "üîç Certificate SHA-1: $CERT_SHA1"
            
            # Basic compatibility check (non-critical)
            if cat /tmp/profile_content.plist | grep -q "$CERT_SHA1"; then
              echo "‚úÖ Certificate appears to be compatible with provisioning profile"
            else
              echo "‚ö†Ô∏è Certificate SHA-1 not found in profile (may still work)"
            fi
            
            # Quick check for expected certificate serial
            if cat /tmp/profile_content.plist | grep -qi "1b6bd133c9d349b16b4cbe1220f1aeb2"; then
              echo "‚úÖ Expected certificate serial found in provisioning profile"
            else
              echo "‚ö†Ô∏è Expected certificate serial not found (may still work)"
            fi
          else
            echo "‚ùå No certificate SHA-1 found in keychain!"
            echo "Available certificates:"
            security find-identity -v -p codesigning $KEYCHAIN_PATH || echo "No certificates found"
          fi
          
          echo "üèÅ Certificate and provisioning profile setup completed"
          echo "Proceeding with build process..."

      - name: Install Rust toolchain
        id: rust_toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Install flutter
        id: flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - uses: davidB/rust-cargo-make@v1
        with:
          version: "0.37.5"

      - name: Install prerequisites
        working-directory: frontend
        run: |
          rustup target install aarch64-apple-ios
          cargo install duckscript_cli --force --locked
          cargo install cargo-lipo --force --locked
          cargo make appflowy-flutter-deps-tools
        shell: bash

      - name: Generate env file
        working-directory: frontend/appflowy_flutter
        run: |
          echo "INTERNAL_BUILD=${{ inputs.internal_build }}" >> .env
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
        shell: bash

      - name: Configure Git credentials for Cargo
        run: |
          git config --global credential.helper store
          echo "https://${{ secrets.ADMIN_GITHUB_TOKEN }}:x-oauth-basic@github.com" > ~/.git-credentials

      - name: Update Xcode project with correct provisioning profile
        working-directory: frontend/appflowy_flutter
        run: |
          echo "üîß Updating Xcode project with provisioning profile UUID: $PROVISIONING_PROFILE_UUID"
          
          # Update project.pbxproj with the actual provisioning profile UUID
          sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = \"pony-ios-profile\";/PROVISIONING_PROFILE_SPECIFIER = \"$PROVISIONING_PROFILE_UUID\";/g" ios/Runner.xcodeproj/project.pbxproj
          
          # Update ExportOptions.plist with the actual provisioning profile name
          echo "üîß Updating ExportOptions.plist with provisioning profile name: $PROVISIONING_PROFILE_NAME"
          sed -i '' "s/<string>pony-ios-profile<\/string>/<string>$PROVISIONING_PROFILE_NAME<\/string>/g" ios/ExportOptions.plist
          
          echo "‚úÖ Updated Xcode project and export options configuration"
          
          # Verify the changes
          echo "üîç Verifying configuration changes:"
          echo "Project configuration:"
          grep -n "PROVISIONING_PROFILE_SPECIFIER" ios/Runner.xcodeproj/project.pbxproj | head -3
          echo "Export options:"
          grep -A 3 -B 1 "provisioningProfiles" ios/ExportOptions.plist

      - name: Build PonyNotes
        working-directory: frontend
        run: |
          export CARGO_FEATURE_NO_NEON=1

          cargo make --profile production-ios-arm64 appflowy-core-dev-ios
          cargo make --profile production-ios-arm64 code_generation

          cd appflowy_flutter
          # ‰ΩøÁî®ÊâãÂä®Á≠æÂêçÊûÑÂª∫ IPAÔºåÊåáÂÆö provisioning profile
          flutter build ipa \
            --build-name ${{ inputs.build_name }} \
            --build-number ${{ inputs.build_number }} \
            --split-debug-info=./debug_info \
            --obfuscate \
            --export-options-plist=ios/ExportOptions.plist

      - name: Upload ipa
        uses: actions/upload-artifact@v4
        with:
          name: PonyNotes-${{ inputs.build_name }}.xcarchive
          path: frontend/appflowy_flutter/build/ios/archive/Runner.xcarchive

      - name: Upload debug symbols
        uses: actions/upload-artifact@v4
        with:
          name: PonyNotes-${{ inputs.build_name }}-ios-debug-symbols
          path: frontend/appflowy_flutter/debug_info

      - name: Upload IPA to Release
        if: inputs.upload_url != ''
        run: |
          # First, we need to export the IPA from the xcarchive
          xcodebuild -exportArchive \
            -archivePath "frontend/appflowy_flutter/build/ios/archive/Runner.xcarchive" \
            -exportPath "frontend/appflowy_flutter/build/ios/ipa" \
            -exportOptionsPlist "frontend/appflowy_flutter/ios/ExportOptions.plist" || {
              echo "Warning: IPA export failed. Uploading xcarchive instead."
              # If IPA export fails, upload the xcarchive
              cd frontend/appflowy_flutter/build/ios/archive
              zip -r "PonyNotes-${{ inputs.build_name }}.xcarchive.zip" Runner.xcarchive
              
              filename="PonyNotes-${{ inputs.build_name }}.xcarchive.zip"
              filepath="PonyNotes-${{ inputs.build_name }}.xcarchive.zip"
              
              # URL encode the filename
              encoded_filename=$(echo -n "$filename" | jq -sRr @uri)
              
              # Remove the {?name,label} template from upload URL if present
              upload_url=$(echo "${{ inputs.upload_url }}" | sed 's/{[^}]*}//g')
              
              echo "Uploading $filename to release..."
              
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$filepath" \
                "${upload_url}?name=${encoded_filename}" \
                --fail-with-body
              exit 0
            }
          
          # If we get here, IPA export succeeded
          filename="PonyNotes-${{ inputs.build_name }}.ipa"
          filepath="frontend/appflowy_flutter/build/ios/ipa/Runner.ipa"
          
          # Rename the IPA file
          mv "$filepath" "frontend/appflowy_flutter/build/ios/ipa/$filename"
          filepath="frontend/appflowy_flutter/build/ios/ipa/$filename"
          
          # URL encode the filename
          encoded_filename=$(echo -n "$filename" | jq -sRr @uri)
          
          # Remove the {?name,label} template from upload URL if present
          upload_url=$(echo "${{ inputs.upload_url }}" | sed 's/{[^}]*}//g')
          
          echo "Uploading $filename to release..."
          
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$filepath" \
            "${upload_url}?name=${encoded_filename}" \
            --fail-with-body

      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@v1
        with:
          version: latest
          token: ${{ SECRETS.SENTRY_TOKEN }}
          organization: appflowy
          project: appflowy

      - name: Upload symbols to Sentry
        run: sentry-cli debug-files upload -o appflowy -p appflowy frontend/appflowy_flutter/build
